name: build-windows-exe

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show workspace info (before)
        shell: pwsh
        run: |
          Write-Host "Runner: $env:RUNNER_OS  Arch: $env:PROCESSOR_ARCHITECTURE"
          Write-Host "Workspace: $PWD"
          git rev-parse --short HEAD
          Write-Host "`n== TREE =="
          Get-ChildItem -Recurse -File | Select-Object FullName | ForEach-Object { $_.FullName }

      - name: Ensure sources exist
        shell: pwsh
        run: |
          $missing = @()
          foreach($p in @(
            "client/client_gui.py",
            "server/server_gui.py",
            "engine/bonding_engine_client.py",
            "engine/bonding_engine_server.py"
          )){
            if(-not (Test-Path $p)){ $missing += $p }
          }
          if($missing.Count -gt 0){
            Write-Error ("Missing files: " + ($missing -join ", "))
          } else {
            Write-Host "All source files present."
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pinned deps
        shell: pwsh
        run: |
          python -V
          python -m pip install --upgrade pip
          pip install pyinstaller==6.9.0
          pip install PyQt5==5.15.10 pyqt5-sip==12.12.2 psutil==5.9.8
          Write-Host "`n== Versions =="
          pyinstaller --version
          python - << 'PY'
import PyQt5, sys
from PyQt5 import QtCore
print("PyQt5 OK, Qt version:", QtCore.QT_VERSION_STR)
PY

      - name: Download FFmpeg (win64 GPL) + extract to workspace
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $rel = Invoke-RestMethod -Uri "https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest"
          $asset = $rel.assets | Where-Object { $_.name -like "ffmpeg-master-latest-win64-gpl.zip" } | Select-Object -First 1
          if(-not $asset){ throw "FFmpeg asset not found." }
          $zip = Join-Path $env:RUNNER_TEMP $asset.name
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath "$env:RUNNER_TEMP\ffm" -Force
          $exe = Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffmpeg.exe | Select-Object -First 1
          $prb = Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffprobe.exe | Select-Object -First 1
          $ply = Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffplay.exe | Select-Object -First 1
          if(-not $exe -or -not $prb -or -not $ply){ throw "ffmpeg/ffprobe/ffplay not found in archive." }
          Copy-Item $exe.FullName -Destination "$PWD\ffmpeg.exe" -Force
          Copy-Item $prb.FullName -Destination "$PWD\ffprobe.exe" -Force
          Copy-Item $ply.FullName -Destination "$PWD\ffplay.exe" -Force
          Write-Host "FFmpeg/FFprobe/FFplay copied."

      - name: Build engines (console)
        shell: pwsh
        run: |
          pyinstaller -y -F engine/bonding_engine_client.py -n BondingEngineClient
          pyinstaller -y -F engine/bonding_engine_server.py -n BondingEngineServer

      - name: Build GUIs (windowed) + bundle FFmpeg
        shell: pwsh
        run: |
          $ff  = Join-Path $PWD "ffmpeg.exe"
          $fp  = Join-Path $PWD "ffprobe.exe"
          $fpl = Join-Path $PWD "ffplay.exe"

          pyinstaller -y -w -F client/client_gui.py -n BondingClient `
            --clean `
            --add-binary "$ff;." `
            --add-binary "$fp;." `
            --add-binary "$fpl;."

          pyinstaller -y -w -F server/server_gui.py -n BondingServer `
            --clean `
            --add-binary "$ff;." `
            --add-binary "$fp;." `
            --add-binary "$fpl;."

      - name: List dist/
        if: always()
        shell: pwsh
        run: |
          Write-Host "`n== DIST TREE =="
          if(Test-Path dist){ Get-ChildItem -Recurse dist | Select-Object FullName }
          else { Write-Host "dist/ not created" }

      - name: Show PyInstaller logs (on failure)
        if: failure()
        shell: pwsh
        run: |
          Write-Host "`n== SEARCH LOGS =="
          $logs = Get-ChildItem -Recurse -Filter "*.log"
          if($logs){
            foreach($l in $logs){
              Write-Host "== LOG: $($l.FullName) =="
              Get-Content $l.FullName -Tail 200
            }
          } else {
            Write-Host "No .log files found."
          }

      - name: Upload EXE artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Bonding_EXE_Artifacts
          path: |
            dist/BondingClient.exe
            dist/BondingServer.exe
            dist/BondingEngineClient.exe
            dist/BondingEngineServer.exe
