name: build-windows-exe

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps (pinned)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.9.0
          pip install "PyQt5==5.15.10" "pyqt5-sip==12.12.2" "psutil==5.9.8"
          pyinstaller --version
          python -c "from PyQt5 import QtCore; print('PyQt5 OK, Qt:', QtCore.QT_VERSION_STR)"

      - name: Verify sources exist
        shell: pwsh
        run: |
          $paths = @(
            "client/client_gui.py",
            "server/server_gui.py",
            "engine/bonding_engine_client.py",
            "engine/bonding_engine_server.py"
          )
          $missing = @()
          foreach($p in $paths){ if(-not (Test-Path $p)){ $missing += $p } }
          if($missing.Count -gt 0){ throw "Missing: $($missing -join ', ')" }
          Write-Host "All sources present."

      - name: Download FFmpeg (win64 GPL) and place next to EXE
        shell: pwsh
        run: |
          $rel = Invoke-RestMethod -Uri "https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest"
          $asset = $rel.assets | Where-Object { $_.name -like "ffmpeg-master-latest-win64-gpl.zip" } | Select-Object -First 1
          if(-not $asset){ throw "FFmpeg zip not found" }
          $zip = "$env:RUNNER_TEMP\ffmpeg.zip"
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath "$env:RUNNER_TEMP\ffm" -Force
          $ff  = (Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffmpeg.exe  | Select-Object -First 1).FullName
          $fp  = (Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffprobe.exe | Select-Object -First 1).FullName
          $fpl = (Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffplay.exe  | Select-Object -First 1).FullName
          if(-not $ff -or -not $fp -or -not $fpl){ throw "ffmpeg/ffprobe/ffplay not found in archive." }
          Copy-Item $ff  -Destination "$PWD\ffmpeg.exe"  -Force
          Copy-Item $fp  -Destination "$PWD\ffprobe.exe" -Force
          Copy-Item $fpl -Destination "$PWD\ffplay.exe"  -Force

      - name: Build engines (console)
        shell: pwsh
        run: |
          pyinstaller -y -F "engine/bonding_engine_client.py" -n "BondingEngineClient"
          pyinstaller -y -F "engine/bonding_engine_server.py" -n "BondingEngineServer"

      - name: Build GUIs (windowed) and bundle FFmpeg
        shell: pwsh
        run: |
          $ff  = Join-Path $PWD "ffmpeg.exe"
          $fp  = Join-Path $PWD "ffprobe.exe"
          $fpl = Join-Path $PWD "ffplay.exe"
          pyinstaller -y -w -F "client/client_gui.py" -n "BondingClient" --clean --add-binary "$ff;." --add-binary "$fp;." --add-binary "$fpl;."
          pyinstaller -y -w -F "server/server_gui.py" -n "BondingServer" --clean --add-binary "$ff;." --add-binary "$fp;." --add-binary "$fpl;."

      - name: List dist/
        if: always()
        shell: pwsh
        run: |
          if(Test-Path dist){ Get-ChildItem -Recurse dist | Select-Object FullName } else { Write-Host "dist/ not created" }

      - name: Upload EXE artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Bonding_EXE_Artifacts
          path: |
            dist/BondingClient.exe
            dist/BondingServer.exe
            dist/BondingEngineClient.exe
            dist/BondingEngineServer.exe
