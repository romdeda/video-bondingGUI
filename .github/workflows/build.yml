name: build-windows-exe

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install PyQt5>=5.15,<6
          pip install psutil>=5.9

      - name: Ensure sources exist
        shell: pwsh
        run: |
          $missing = @()
          foreach($p in @(
            "client/client_gui.py",
            "server/server_gui.py",
            "engine/bonding_engine_client.py",
            "engine/bonding_engine_server.py"
          )){
            if(-not (Test-Path $p)){ $missing += $p }
          }
          if($missing.Count -gt 0){
            Write-Error ("Missing files: " + ($missing -join ", "))
          } else {
            Write-Host "All source files present."
          }

      - name: Download FFmpeg (win64 GPL) + extract to workspace
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $rel = Invoke-RestMethod -Uri "https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest"
          $asset = $rel.assets | Where-Object { $_.name -like "ffmpeg-master-latest-win64-gpl.zip" } | Select-Object -First 1
          if(-not $asset){ throw "FFmpeg asset not found." }
          $zip = Join-Path $env:RUNNER_TEMP $asset.name
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath "$env:RUNNER_TEMP\ffm" -Force
          $exe = Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffmpeg.exe | Select-Object -First 1
          $prb = Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffprobe.exe | Select-Object -First 1
          $ply = Get-ChildItem -Recurse "$env:RUNNER_TEMP\ffm" -Filter ffplay.exe | Select-Object -First 1
          if(-not $exe -or -not $prb -or -not $ply){ throw "ffmpeg/ffprobe/ffplay not found in archive." }
          Copy-Item $exe.FullName -Destination "$PWD\ffmpeg.exe"
          Copy-Item $prb.FullName -Destination "$PWD\ffprobe.exe"
          Copy-Item $ply.FullName -Destination "$PWD\ffplay.exe"
          Write-Host "FFmpeg/FFprobe/FFplay copied."

      - name: Build engines (console)
        run: |
          pyinstaller -F engine/bonding_engine_client.py -n BondingEngineClient
          pyinstaller -F engine/bonding_engine_server.py -n BondingEngineServer

      - name: Build GUIs (windowed) + bundle FFmpeg
        run: |
          pyinstaller -w -F client/client_gui.py -n BondingClient ^
            --add-binary "ffmpeg.exe;." --add-binary "ffprobe.exe;." --add-binary "ffplay.exe;."
          pyinstaller -w -F server/server_gui.py -n BondingServer ^
            --add-binary "ffmpeg.exe;." --add-binary "ffprobe.exe;." --add-binary "ffplay.exe;."

      - name: Show PyInstaller logs (on failure)
        if: failure()
        shell: pwsh
        run: |
          Get-ChildItem . -Recurse -Filter "*.log" | Select-Object -First 10 | ForEach-Object {
            Write-Host "== LOG: $($_.FullName) =="
            Get-Content $_.FullName -Tail 120
          }

      - name: Upload EXE artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Bonding_EXE_Artifacts
          path: |
            dist/BondingClient.exe
            dist/BondingServer.exe
            dist/BondingEngineClient.exe
            dist/BondingEngineServer.exe
